{"version":3,"sources":["Home.js","Api.js","NavBar.js","FoodMenu.js","FoodItem.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","SnackOrBoozeApi","axios","get","result","data","NavBar","expand","exact","to","navbar","FoodMenu","snacks","map","snack","id","key","name","FoodItem","items","cantFind","useParams","find","description","recipe","serve","App","useState","isLoading","setIsLoading","setSnacks","useEffect","a","getSnacks","path","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAmBeA,MAhBf,WACE,OACE,6BAASC,UAAU,YACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUA,UAAU,eAClB,kBAAC,IAAD,KACE,wBAAIA,UAAU,oBAAd,uD,iCCWGC,E,yOANUC,IAAMC,IAAN,UAZJ,wBAYI,Y,cAAfC,E,yBACCA,EAAOC,M,8GCQHC,MAlBf,WACE,OACE,6BACE,kBAAC,IAAD,CAAQC,OAAO,MACb,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIT,UAAU,gBAAhC,kBAIA,kBAAC,IAAD,CAAKA,UAAU,UAAUU,QAAM,GAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASD,GAAG,WAAZ,e,aCsBGE,MAzBf,YAA+B,IAAXC,EAAU,EAAVA,OAClB,OACE,6BAASZ,UAAU,YACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWA,UAAU,gCAArB,aAGA,kBAAC,IAAD,uGAIA,kBAAC,IAAD,KACGY,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAAML,GAAE,kBAAaK,EAAMC,IAAMC,IAAKF,EAAMC,IAC1C,kBAAC,IAAD,KAAgBD,EAAMG,eCGvBC,MA1Bf,YAAwC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjBL,EAAOM,cAAPN,GAEJD,EAAQK,EAAMG,MAAK,SAAAR,GAAK,OAAIA,EAAMC,KAAOA,KAC7C,OAAKD,EAGH,iCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWd,UAAU,gCAClBc,EAAMG,MAET,kBAAC,IAAD,CAAUjB,UAAU,eAAec,EAAMS,aACzC,2BACE,sCADF,IACkBT,EAAMU,QAExB,2BACE,qCADF,IACiBV,EAAMW,UAdZ,kBAAC,IAAD,CAAUhB,GAAIW,KC4CpBM,MA1Cf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEeF,mBAAS,IAFxB,mBAENf,EAFM,KAEEkB,EAFF,KAab,OATAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACqB/B,EAAgBgC,YADrC,OACMrB,EADN,OAEEkB,EAAUlB,GACViB,GAAa,GAHf,4CADc,uBAAC,WAAD,wBAMdI,KACC,IAECL,EACK,6CAIP,yBAAK5B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAAC0B,KAAK,KAChB,kBAAC,EAAD,CAAMtB,OAAQA,KAEhB,kBAAC,IAAD,CAAOJ,OAAK,EAAC0B,KAAK,WAChB,kBAAC,EAAD,CAAMtB,OAAQA,EAAQuB,MAAM,YAE9B,kBAAC,IAAD,CAAOD,KAAK,eACV,kBAAC,EAAD,CAAOf,MAAOP,EAAQQ,SAAS,aAEjC,kBAAC,IAAD,KACE,8EC/BMgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73a80a90.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\n\nfunction Home() {\n  return (\n    <section className=\"col-md-8\">\n      <Card>\n        <CardBody className=\"text-center\">\n          <CardTitle>\n            <h3 className=\"font-weight-bold\">\n              Welcome to Silicon Valley's premier dive cafe!\n            </h3>\n          </CardTitle>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Home;\n","import axios from \"axios\";\n\nconst BASE_API_URL = \"http://localhost:5000\";\n\n/* \n  json-server will give you CRUD endpoints on snacks and drinks.\n  Here we've provided you with a single action to get all drinks.\n\n  You'll need to add to this class as you build features for the app.\n*/\n\nclass SnackOrBoozeApi {\n\n  static async getSnacks() {\n    const result = await axios.get(`${BASE_API_URL}/snacks`);\n    return result.data;\n  }\n\n}\n\nexport default SnackOrBoozeApi;\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, NavItem } from \"reactstrap\";\n\nfunction NavBar() {\n  return (\n    <div>\n      <Navbar expand=\"md\">\n        <NavLink exact to=\"/\" className=\"navbar-brand\">\n          Snack or Booze\n        </NavLink>\n\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink to=\"/snacks\">Snacks</NavLink>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./FoodMenu.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup,\n  ListGroupItem\n} from \"reactstrap\";\n\nfunction FoodMenu({ snacks }) {\n  return (\n    <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            Food Menu\n          </CardTitle>\n          <CardText>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </CardText>\n          <ListGroup>\n            {snacks.map(snack => (\n              <Link to={`/snacks/${snack.id}`} key={snack.id}>\n                <ListGroupItem>{snack.name}</ListGroupItem>\n              </Link>\n            ))}\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default FoodMenu;\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\n\nfunction FoodItem({ items, cantFind }) {\n  const { id } = useParams();\n\n  let snack = items.find(snack => snack.id === id);\n  if (!snack) return <Redirect to={cantFind} />;\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {snack.name}\n          </CardTitle>\n          <CardText className=\"font-italic\">{snack.description}</CardText>\n          <p>\n            <b>Recipe:</b> {snack.recipe}\n          </p>\n          <p>\n            <b>Serve:</b> {snack.serve}\n          </p>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default FoodItem;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport SnackOrBoozeApi from \"./Api\";\nimport NavBar from \"./NavBar\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Menu from \"./FoodMenu\";\nimport Snack from \"./FoodItem\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [snacks, setSnacks] = useState([]);\n\n  useEffect(() => {\n    async function getSnacks() {\n      let snacks = await SnackOrBoozeApi.getSnacks();\n      setSnacks(snacks);\n      setIsLoading(false);\n    }\n    getSnacks();\n  }, []);\n\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar />\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home snacks={snacks} />\n            </Route>\n            <Route exact path=\"/snacks\">\n              <Menu snacks={snacks} title=\"Snacks\" />\n            </Route>\n            <Route path=\"/snacks/:id\">\n              <Snack items={snacks} cantFind=\"/snacks\" />\n            </Route>\n            <Route>\n              <p>Hmmm. I can't seem to find what you want.</p>\n            </Route>\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}